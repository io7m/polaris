#
# Copyright © 2017 <code@io7m.com> http://io7m.com
#
# Permission to use, copy, modify, and/or distribute this software for any
# purpose with or without fee is hereby granted, provided that the above
# copyright notice and this permission notice appear in all copies.
#
# THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
# WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
# MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
# WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
# ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR
# IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
#

EXPECTED_TERM_NAME_UNQUALIFIED_GOT_EXPRESSION = An unqualified term name
EXPECTED_TERM_REFERENCE_GOT_EXPRESSION        = A term reference
EXPECTED_TYPE_NAME_UNQUALIFIED_GOT_EXPRESSION = An unqualified type name
EXPECTED_TYPE_REFERENCE_GOT_EXPRESSION        = A type reference
EXPECTED_EXPRESSION_BUT_GOT_DECLARATION       = An expression
EXPECTED_KEYWORD                              = A keyword:

INVALID_LOCAL           = (local { <expression-or-declaration> } <expression>)
INVALID_LAMBDA          = (lambda ({ <term-name> }) <expression>)
INVALID_MATCH           = (match <expression> { <match-case> })
INVALID_MATCH_CASE      = (case <pattern> <expression>)
INVALID_INTEGER         = A valid integer
INVALID_REAL            = A valid real number
INVALID_TERM_NAME       = A valid term name matching the pattern:
INVALID_TYPE_NAME       = A valid type name matching the pattern:
INVALID_UNIT_NAME       = A valid unit name matching the pattern:
INVALID_VALUE           = (value <term-name> <expression>)
INVALID_FUNCTION        = (function <term-name> ({ <term-name> }) <expression>)
INVALID_APPLICATION     = (<term-name> { <expression> })
INVALID_S_EXPRESSION    = A well-formed S-expression: <symbol> | <quoted-string> | ({ <expression> })

INVALID_TYPE_EXPRESSION                       = <type-reference> | <type-application> | <type-forall>
INVALID_TYPE_EXPRESSION_ARROW                 = (→ { <type-expr> } [ <type-expr-variadic> ] <type-expr>)
INVALID_TYPE_EXPRESSION_VARIADIC              = (… <type-expr>)
INVALID_TYPE_EXPRESSION_UNEXPECTED_VARIADIC   = A non-variadic type parameter
INVALID_TYPE_EXPRESSION_FORALL                = (∀ <type-name> { <type-name> } <type-expression>)
INVALID_TYPE_EXPRESSION_FORALL_DUPLICATE_NAME = Type parameter names to be unique within the for-all

INVALID_RECORD                 = (record <type-name> [ (for-all { <type-name> }) ] { <field> })
INVALID_RECORD_FIELD           = (field <term-name> <type-expression>)
INVALID_RECORD_DUPLICATE_FIELD = Field names to be unique within the record type

INVALID_PATTERN   = <real> | <integer> | <term-name> | (<term-name> <term-name>) | _
INVALID_PATTERN_EXPECTED_CONSTRUCTOR_REFERENCE = A reference to a constructor
INVALID_PATTERN_EXPECTED_CONSTRUCTOR_UNQUALIIFIED_ARGUMENT_NAME = An unqualified name as the constructor argument
